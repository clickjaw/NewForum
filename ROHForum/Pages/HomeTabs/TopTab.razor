@page "/posts/top"

<div class="">



    <div class="container p-3">
        <h1>Top Content</h1>
        @foreach(var post in posts)
        {
            <div class="row p-2 m-2 postBorder">
                <div class="col-md-2">
                    <div class="row"><img class="upvoteArrow" style="height:100%; width:40px;" @onclick="()=>upvoteClicker(post)" src="/ROHFORUMART/blankArrowUp.png" /> @post.Upvote</div>

                    <div class="row"><img class="downvoteArrow" style="height:100%; width:40px;" src="/ROHFORUMART/blankArrowDown.png" @onclick="()=>downvoteClicker(post)" /> @post.Downvote</div>
                </div>
                <div class="col-md-9 ">
                    <div class="row cursorPointer onHoverText" @onclick='(()=>_navManager.NavigateTo($"/posts/{post.PostId}"))'><p>@post.Title</p></div>
                    <div class="row cursorPointer onHoverText d-flex justify-content-between" @onclick='(()=>_navManager.NavigateTo($"/posts/tag/{post.Tags}"))'>
                        @if(post.PostComments is not null){
                            <div class="col">@post.PostComments.Count() comment(s)</div>
                            <div class="col-2">@post.Tags</div>

                        }
                        else
                        {
                            <div class="col">0 comments</div>
                            <div class="col-2">@post.Tags</div>

                        }
                        </div>
                </div>

                <div>

                </div>
            </div>
        }
    </div>

 
</div>

@code {
    public List<PostsModel> posts = new();
    int postCount = 0;

    protected override void OnInitialized()
    {
        posts = _postService.GetTopPosts();
        postCount = posts.Count();
    }

    public void upvoteClicker(PostsModel postModel)
    {

        postModel.Upvote++;
        _postService.UpdatePostVotes(postModel);
        posts = _postService.GetTopPosts();
    }

    public void downvoteClicker(PostsModel postModel)
    {

        postModel.Downvote++;
        _postService.UpdatePostVotes(postModel);
        posts = _postService.GetTopPosts();

    }

   
    }

    



